package main

import "testing"

func TestExplode(t *testing.T) {
	testcases := []struct {
		in          string
		want        string
		wantChanged bool
	}{
		{
			in:          "[[[[[9,8],1],2],3],4]",
			want:        "[[[[0,9],2],3],4]",
			wantChanged: true,
		},
		{
			in:          "[7,[6,[5,[4,[3,2]]]]]",
			want:        "[7,[6,[5,[7,0]]]]",
			wantChanged: true,
		},
		{
			in:          "[[6,[5,[4,[3,2]]]],1]",
			want:        "[[6,[5,[7,0]]],3]",
			wantChanged: true,
		},
		{
			in:          "[[3,[2,[1,[7,3]]]],[6,[5,[4,[3,2]]]]]",
			want:        "[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]",
			wantChanged: true,
		},
		{
			in:          "[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]",
			want:        "[[3,[2,[8,0]]],[9,[5,[7,0]]]]",
			wantChanged: true,
		},
	}
	for _, tc := range testcases {
		t.Run(tc.in, func(t *testing.T) {
			lf, err := parse(tc.in)
			if err != nil {
				t.Errorf("error parsing in %q: %v", tc.in, err)
				return
			}
			got, _, _, changed := explode(lf, 0, 0, true)
			if got.String() != tc.want {
				t.Errorf("explode got %v, want %v", got, tc.want)
			}
			if changed != tc.wantChanged {
				t.Errorf("explode got changed %v, want %v", changed, tc.wantChanged)
			}
		})
	}
}

func TestAdd(t *testing.T) {
	testcases := []struct {
		a, b string
		want string
	}{
		{
			"[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]",
			"[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]",
			"[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]]",
		},
		{
			"[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]]",
			"[[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]",
			"[[[[6,7],[6,7]],[[7,7],[0,7]]],[[[8,7],[7,7]],[[8,8],[8,0]]]]",
		},
		{
			"[[[[6,7],[6,7]],[[7,7],[0,7]]],[[[8,7],[7,7]],[[8,8],[8,0]]]]",
			"[[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]",
			"[[[[7,0],[7,7]],[[7,7],[7,8]]],[[[7,7],[8,8]],[[7,7],[8,7]]]]",
		},
		{
			"[[[[7,0],[7,7]],[[7,7],[7,8]]],[[[7,7],[8,8]],[[7,7],[8,7]]]]",
			"[7,[5,[[3,8],[1,4]]]]",
			"[[[[7,7],[7,8]],[[9,5],[8,7]]],[[[6,8],[0,8]],[[9,9],[9,0]]]]",
		}, {
			"[[[[7,7],[7,8]],[[9,5],[8,7]]],[[[6,8],[0,8]],[[9,9],[9,0]]]]",
			"[[2,[2,2]],[8,[8,1]]]",
			"[[[[6,6],[6,6]],[[6,0],[6,7]]],[[[7,7],[8,9]],[8,[8,1]]]]",
		}, {

			"[[[[6,6],[6,6]],[[6,0],[6,7]]],[[[7,7],[8,9]],[8,[8,1]]]]",
			"[2,9]",
			"[[[[6,6],[7,7]],[[0,7],[7,7]]],[[[5,5],[5,6]],9]]",
		}, {
			"[[[[6,6],[7,7]],[[0,7],[7,7]]],[[[5,5],[5,6]],9]]",
			"[1,[[[9,3],9],[[9,0],[0,7]]]]",
			"[[[[7,8],[6,7]],[[6,8],[0,8]]],[[[7,7],[5,0]],[[5,5],[5,6]]]]",
		}, {
			"[[[[7,8],[6,7]],[[6,8],[0,8]]],[[[7,7],[5,0]],[[5,5],[5,6]]]]",
			"[[[5,[7,4]],7],1]",
			"[[[[7,7],[7,7]],[[8,7],[8,7]]],[[[7,0],[7,7]],9]]",
		}, {
			"[[[[7,7],[7,7]],[[8,7],[8,7]]],[[[7,0],[7,7]],9]]",
			"[[[[4,2],2],6],[8,7]]",
			"[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]",
		},
	}
	for _, tc := range testcases {
		t.Run(tc.a, func(t *testing.T) {
			a, err := parse(tc.a)
			if err != nil {
				t.Fatal(err)
			}
			b, err := parse(tc.b)
			if err != nil {
				t.Fatal(err)
			}
			if got := a.add(b); got.String() != tc.want {
				t.Errorf("add %q + %q, got %v, want %q", tc.a, tc.b, got, tc.want)
			}
		})
	}
}
